@use '../root' as *;


/* =============================
   TagCloud Helper Styles
============================= */
.tag-cloud-section {
  padding: 150px 0 0;

  @include breakpoint(max-xxl) {
    padding: 120px 0;
  }

  @include breakpoint(max-lg) {
    padding: 100px 0;
  }

  @include breakpoint(max-md) {
    padding: 80px 0;
  }

  @include breakpoint(max-sm) {
    padding: 60px 0;
  }

  .section-top {
    padding-bottom: 20px;
    @include breakpoint (max-xxl){
        padding-bottom: 60px;
    }
  }
}

// Variables
:root {
  --tagcloud-transition-user-duration: 1250ms;
  --tagcloud-transition-user-ease: ease-in-out;
  --tagcloud-transition-duration: 250ms;
  --tagcloud-transition-ease: ease-out;
  // --tagcloud-bg-color-rgb: 0, 0, 0;
  --tagcloud-bg-color-rgb: #fff;
  --tagcloud-animation-duration: 25s;
  --tagcloud-animation-direction: normal;
  --tagcloud-animation-play-state: running;
  --tagcloud-diameter: 62rem;
  --tagcloud-start-rotation: 54;
  --tagcloud-controls-diameter: 25rem;
  --tagcloud-control-bg-color: transparent;
  --tagcloud-control-bg-hover-color: transparent;
  --tagcloud-control-bg-checked-color: transparent;
  --tag-diameter: 8rem;
  --tag-font-color-rgb: 255, 255, 255;
  --tag-font-family: 'Open Sans', sans-serif;
  --tag-font-size: 1rem;
}

// Responsive for all device

@include breakpoint (max-xl){
    :root {
    --tagcloud-diameter: 52rem;
    --tag-diameter: 7rem;
    }
}

@include breakpoint (max-lg){
    :root {
    --tagcloud-diameter: 44rem;
    --tag-diameter: 6.5rem;
    }
}

@include breakpoint (max-md){
    :root {
    --tagcloud-diameter: 33rem;
    --tag-diameter: 5rem;
    }
}

@include breakpoint (max-sm){
    :root {
    --tagcloud-diameter: 28rem;
    --tag-diameter: 5rem;
    }
}
@include breakpoint (max-xs){
    :root {
    --tagcloud-diameter: 26rem;
    --tag-diameter: 4rem;
    }
}
@include breakpoint (max-xsmall){
    :root {
    --tagcloud-diameter: 22rem;
    --tag-diameter: 3.5rem;
    }
}
@include breakpoint (max-xxsmall){
    :root {
    --tagcloud-diameter: 20rem;
    --tag-diameter: 3rem;
    }
}


// Reset
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  border: 0;
  box-sizing: border-box;
}

*:focus {
  outline: none;
}

.tagcloud-container {
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  background-color: rgb(var(--tagcloud-bg-color-rgb));
  // overflow: hidden;
}


// Tagcloud Wrapper
.tagcloud-wrapper {
  --_control-diamater: var(--tagcloud-controls-diameter);
  --_control-radius: calc(var(--_control-diamater) / 2);
  --_diameter: var(--tagcloud-diameter);
  --_radius: calc(var(--_diameter) / 2 - var(--tag-diameter) / 2);
  width: var(--control-diameter);
  aspect-ratio: 1 / 1;
  font-family: var(--tag-font-family);
  font-size: var(--tag-font-size);

  &:has(.tagcloud-rotation:hover) {
    --tagcloud-animation-play-state: paused;
  }

  .tagcloud-tags {
    position: absolute;
    width: var(--_diameter);
    aspect-ratio: 1 / 1;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    list-style-type: none;
    position: relative;
    transform-style: inherit;
    animation: tagcloud-rotation var(--tagcloud-animation-duration) var(--tagcloud-animation-direction) linear infinite var(--tagcloud-animation-play-state);
  }

  .tagcloud-tag {
    --_phi: acos(calc(-1 + (2 * var(--index)) / var(--num-elements)));
    --_theta: calc(sqrt(var(--num-elements) * 3.14159) * var(--_phi));
    --_x: calc(cos(var(--_theta)) * sin(var(--_phi)));
    --_y: calc(sin(var(--_theta)) * sin(var(--_phi)));
    --_z: calc(cos(var(--_phi)));
    --_vector-length: sqrt(var(--_x) * var(--_x) + var(--_y) * var(--_y) + var(--_z) * var(--_z));
    --_normalized-x: calc(var(--_x) / var(--_vector-length));
    --_normalized-y: calc(var(--_y) / var(--_vector-length));
    --_normalized-z: calc(var(--_z) / var(--_vector-length));
    --_scaled-x: calc(var(--_normalized-x) * var(--_radius));
    --_scaled-y: calc(var(--_normalized-y) * var(--_radius));
    --_scaled-z: calc(var(--_normalized-z) * var(--_radius));
    --_final-x: calc(var(--_scaled-x) + var(--_radius));
    --_final-y: calc(var(--_scaled-y) + var(--_radius));
    --_final-z: var(--_scaled-z);

    pointer-events: none;
    width: var(--tag-diameter);
    height: var(--tag-diameter);
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    transition: opacity var(--tagcloud-transition-duration) var(--tagcloud-transition-ease);
    transform: translate3d(var(--_final-x), var(--_final-y), var(--_final-z));
    animation: tagcloud-tag-rotation var(--tagcloud-animation-duration) var(--tagcloud-animation-direction) linear infinite var(--tagcloud-animation-play-state);

    div {
      transform: rotateZ(calc(var(--_current-rotation) * -1deg));
      transition: transform var(--tagcloud-transition-user-duration) var(--tagcloud-transition-user-ease);

      a {
        pointer-events: initial;
        color: rgb(var(--tag-font-color-rgb));
        text-decoration: none;
        text-shadow: 1px 1px 1px rgb(var(--tagcloud-bg-color-rgb)),
                     1px -1px 1px rgb(var(--tagcloud-bg-color-rgb)),
                    -1px 1px 1px rgb(var(--tagcloud-bg-color-rgb)),
                    -1px -1px 1px rgb(var(--tagcloud-bg-color-rgb)),
                     0 0 1rem rgb(var(--tagcloud-bg-color-rgb));
      }
    }
  }

  .tagcloud-controls {
    width: var(--_control-diamater);
    aspect-ratio: 1 / 1;
    position: relative;
    --_current-rotation: var(--tagcloud-start-rotation);
    transform-style: inherit;

    .tagcloud-control-button {
      --_width: var(--_control-radius);
      --_height: calc(var(--_control-diamater) * 3.14159 / var(--num-elements) + 1px);
      --_theta-start: 0;
      --_theta-length: calc(2 * 3.14159);
      --_segment: calc(var(--_theta-start) + var(--index) / var(--num-elements) * var(--_theta-length));
      --_x: calc(var(--_control-radius) * cos(var(--_segment)));
      --_y: calc(var(--_control-radius) * sin(var(--_segment)) + var(--_control-radius) - var(--_height) / 2);
      --_rotation: calc(var(--index) / var(--num-elements) * 360deg);

      position: absolute;
      left: var(--_x);
      top: var(--_y);
      width: var(--_width);
      height: var(--_height);
      clip-path: polygon(0% 50%, 100% 0%, 100% 100%);
      transform-origin: right center;
      transform: rotate(var(--_rotation));
      transition: background-color var(--tagcloud-transition-duration) var(--tagcloud-transition-ease);
      background-color: var(--tagcloud-control-bg-color);

      input {
        -webkit-appearance: none;
        appearance: none;
        opacity: 0;
        width: 100%;
        height: 100%;
      }

      &:has(input:checked) {
        background-color: var(--tagcloud-control-bg-checked-color);
      }

      &:has(input:hover) {
        background-color: var(--tagcloud-control-bg-hover-color);
      }

      & ~ .tagcloud-rotation {
        transform: translate(-50%, -50%) rotate(calc(var(--_current-rotation) * 1deg));

        .tagcloud-tags .tagcloud-tag div {
          transform: rotateZ(calc(var(--_current-rotation) * -1deg));
        }
      }
    }

    // Control rotation rules (example, add up to 20 or more)
    @for $i from 1 through 20 {
      &:has(.tagcloud-control-button:nth-child(#{$i}) input:checked) {
        --_current-rotation: #{(18 * ($i - 1))};
      }
    }

    .tagcloud-rotation {
      position: absolute;
      width: var(--_diameter);
      aspect-ratio: 1 / 1;
      perspective: calc(var(--_diameter) * 2);
      transform-style: preserve-3d;
      left: 50%;
      top: 50%;
      background: radial-gradient(rgba(var(--tagcloud-bg-color-rgb), 0.75) 15%, rgba(var(--tagcloud-bg-color-rgb), 0) calc(75% - var(--tag-diameter)));
      border-radius: 50%;
      transform: translate(-50%, -50%) rotate(calc(var(--_current-rotation) * 1deg));
      transition: transform var(--tagcloud-transition-user-duration) var(--tagcloud-transition-user-ease);
    }
  }

  // When hovering one tag, dim others
  .tagcloud-tags:has(.tagcloud-tag div a:hover) {
    .tagcloud-tag:not(:has(div a:hover)) {
      opacity: 0.25;
    }
  }
}

// Keyframes
@keyframes tagcloud-rotation {
  from {
    transform: translate(-50%, -50%) rotateX(0deg);
  }
  to {
    transform: translate(-50%, -50%) rotateX(360deg);
  }
}

@keyframes tagcloud-tag-rotation {
  from {
    transform: translate3d(var(--_final-x), var(--_final-y), var(--_final-z)) rotateX(360deg);
  }
  to {
    transform: translate3d(var(--_final-x), var(--_final-y), var(--_final-z)) rotateX(0deg);
  }
}